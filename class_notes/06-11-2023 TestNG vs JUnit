


06-11-2023 TestNG vs JUnit



Recap:

Page Object Model
-It is a design pattern enables programmers (testers) to store all the elements related to a web page in their respective class (object repository)
-We can also create reusable methods related to this specific page in their respective class
-@FindBy is used to locate elements
-PageFactory and its initElements() method is used in the default contructor to introduce all the web elements with our single driver.


Advantages:
	- Reusable
	- Readability
	- Maintanence of web elements easier




TASK
Go to “https://www.etsy.com/”
Validate the user see below menu item links with expected texts
    Father’s Day Gifts
    Jewelry & Accessories
    Clothing & Shoes
    Home & Living
    Wedding & Party
    Toys & Entertainment
    Art & Collectibles
    Craft Supplies
    Gifts & Gift Cards




Animal a1 = new Animal(); // declaration and initialization

Animal a1; // declaration in the base class

a1 = new Animal(); // initialization in the child class




TestNG:
- Unit testing tool we used for annotations, assertions, reports
- xml files: grouping together the test scripts 
- DataProvider: used to execute same script with different data
- Set priority between tests - ordering purposes
- Help us with parallel testing
- Dependency between test cases




IGNORING SOME TEST SCRIPTs
1. Command out or delete the @Test annotation for the script
	(NOT RECOMMENDED)
2. Use @Ignore annotation on the top of test you would like ignore
	SYNTAX:
		    @Ignore
    		@Test

3. Use enabled=false property next @Test annotation
	SYNTAX: @Test(enabled = false)



DATA PROVIDER ANNOTATION 
-DataProvider annotation is useful when you will execute the same script with different data sets
-It will execute the scripts for each data you povided in the @DataProvider


Syntax:
@DataProvider
public Object[] getData(){
	
}


Login test
Username 		Password 		Message
empty 			empty			Invalid Username entered!
wrong 			correct 		Invalid Username entered!
correct 		wrong 			Invalid Password entered!
wrong 			wrong 			Invalid Username entered!


TestNG Soft Assertions
-Hard assertions: used to stop the execution if there is failure.
-Soft assertions: used to verify expected output but do not pause the script execution till the end. And will attach the failure to the report once all the script is executed.

JUnit vs TestNG
-Initial, JUnit was relased by Apache
-Then, TestNG was released
	TestNG = Test New Generation
-TestNG is more improved version of JUnit



UI FRAMEWORK: set of tools, design patterns, rules and regulations that you used to provide the best automation practices.




Test-Driven Framework -> based on TestNG

Tell me about your UI Framework.
-My framework uses Java programming language as its core and all the other tools are designed around it.
-We use Maven as a build and it provides many advantages such as providing pom.xml,  creating profiles, and executing profiles with maven commands.
-Maven also centralize all our dependencies like TestNG, Selenium, WebDriverManager and more in the pom.xml and it makes it easy for us to maintain them with their versions.
-We also utilize Maven surefire reports to be generated after executing our profiles with Maven commands (mvn test -PSmoke)
-We use TestNG in our framework for its advantages like annotations, assertions, DataProvider, xml files, setting priorities and more.
-We use Selenium WebDriver and WebDriverManager to set up the browsers and interact with web elements for our UI scripts.
-We implement design patterns like Singleton to provide a single driver to be used across the project and Page Object Model to centralize all the web elements in their respective classes to increase the reusability, readability and maintanence of the elements in case some locators changing. Not only elements but we also store reusable methods.
-We do have an important package in our framework where we store all the utility classes having methods like setting-quitting driver, reading global configurations, and handling advanced frontend tasks like table-handling, dropdown-handling etc.
-Our framework is designed to handle Cross-Browser testing which is controlled from configuration.properties file where we store all the important global information. 
-We execute 2 important suites in our framework and these are Smoke and Regression suites and they are integrated with xml files and maven profiles. Also, we push code to GitLab and the repo is intergrated with Jenkins to automatically trigger the test executions.
-We run Smoke daily at __ AM and Regression at the end of each sprint.
-We currently have 8 Smoke test cases which runs in 5 mins and 540 Regression test cases which run in 3.5 hours.
-Besides all of the above, we use all the OOP principles in our framework to provide the best coding practices and increase the code reusability and readability. One good example is that we have a Base Test class where we execute all the before and after actions and all the other Test classes inheriting these from the Base class.


Behavior-Driven Framework -> based on Cucumber









